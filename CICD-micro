pipeline {
    agent {
        label "java"
    }
    environment {
        SONAR_URL = 'http://3.110.142.127:9000'
        SONAR_TOKEN = credentials('sonarqube-secretkey')
        NEXUS_URL = 'http://13.233.165.126:8081'
        Image_url = '13.233.165.126'
        NEXUS_CREDENTIALS = credentials('nexus')
    }
    stages {
        stage("Build the app") {
            steps {
                script {
                    // Define the list of project directories
                    def projects = ["acceleration-a", "acceleration-calc", "acceleration-dv"]

                    // Loop through each project and run the required commands
                    for (project in projects) {
                        dir("/home/jenkinss/workspace/Micro/${project}") {
                            echo "Building project: ${project}"
                            sh "yarn install"
                            sh "yarn build"
                            echo "Build completed for ${project}"
                            
                            // Run unit tests and generate coverage report using Jest or Mocha
                            echo "Running tests and generating coverage for ${project}"
                            sh "npx jest --coverage --passWithNoTests" // Running Jest directly using npx
                            
                            // Run SonarQube analysis
                            echo "Running SonarQube analysis for ${project}"
                            def scannerHome = tool 'scanner_sonar'
                            withSonarQubeEnv('jenkins-sonar') {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${project} \
                                    -Dsonar.projectName=${project} \
                                    -Dsonar.sources=. \
                                    -Dsonar.language=ts \
                                    -Dsonar.host.url=${SONAR_URL} \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.exclusions=**/node_modules/**,**/dist/**
                                """
                            }

                            // Wait for the quality gate to complete (uncomment if needed)
                            timeout(time: 1, unit: 'HOURS') {
                                def qualityGate = waitForQualityGate()
                                if (qualityGate.status != 'OK') {
                                    error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                                }
                            }
                            // Build and push Docker image to multiple Nexus repositories
                            echo "Building Docker image for ${project}"
                            
                            // Define Nexus registry URLs
                            def nexusRegistries = [
                                "${Image_url}:4000"
                            ]
                            
                            // Use withCredentials to securely handle Nexus credentials
                            withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                                for (registry in nexusRegistries) {
                                    def imageTag = "${registry}/${project}:1.0"
                                    
                                    sh """
                                        # Build Docker image
                                        docker build -t ${imageTag} .
                                        
                                        # Login to Nexus registry
                                        echo "${NEXUS_PASSWORD}" | docker login -u "${NEXUS_USERNAME}" --password-stdin ${registry}
                                        
                                        # Push Docker image
                                        docker push ${imageTag}
                                    """
                                    
                                    echo "Docker image pushed to Nexus repository: ${imageTag}"
                                }
                            }
                }
            }
        }
    }
}
}
}
